# Reference: https://github.com/lima-vm/lima/blob/master/templates/default.yaml

param:
  dataMountPath: /mnt/lima-dev-data

vmType: "vz"

os: "Linux"

disk: "20GiB"

mountType: "virtiofs"
mounts: []

additionalDisks: []

images:
  - location: "https://cloud-images.ubuntu.com/releases/plucky/release-20250701/ubuntu-25.04-server-cloudimg-arm64.img"
    arch: "aarch64"
    digest: "sha256:26d0ac2236f12954923eb35ddfee8fa9fff3eab6111ba84786b98ab3b972c6d8"

user:
  name: dev
  home: /home/dev
  shell: /bin/zsh

ssh:
  localPort: 60022
  forwardAgent: true
  loadDotSSHPubKeys: null

provision:
  - mode: system
    script: |
      #!/bin/bash
      set -eux -o pipefail

      # Setup data mount permissions
      chown -R "{{.User}}" "{{.Param.dataMountPath}}"
      
      # Install and update packages
      export DEBIAN_FRONTEND=noninteractive

      apt-get update -y
      apt-get dist-upgrade -y
      apt-get autoremove -y
      apt-get install zsh git make neovim -y

  # Setup Docker
  - mode: system
    script: |
      #!/bin/bash
      set -eux -o pipefail

      if command -v docker &>/dev/null; then
        echo "Docker is installed. Exiting."
        exit 0
      fi

      echo "Docker not found, proceeding with installation..."

      export DEBIAN_FRONTEND=noninteractive

      apt-get update -y

      # Add Docker's official GPG key:
      apt-get install ca-certificates curl -y
      install -m 0755 -d /etc/apt/keyrings
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
      chmod a+r /etc/apt/keyrings/docker.asc

      # Add Docker's repository to Apt sources:
      echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
        tee /etc/apt/sources.list.d/docker.list > /dev/null
      apt-get update -y

      apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y

      groupadd docker
      usermod -aG docker {{.User}}

  # Install NVM
  - mode: user
    script: |
      #!/bin/bash
      set -eux -o pipefail

      export DEBIANT_FRONTEND=noninteractive

      # Do not edit shell config files
      PROFILE=/dev/null bash -c 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash'

  # Setup dotfiles
  - mode: user
    script: |
      #!/bin/bash
      set -eux -o pipefail

      DIRECTORY="$HOME/dotfiles"
      
      if [ -d "$DIRECTORY" ]; then
        echo "$DIRECTORY exists, skipping setup"
        exit 1
      fi


      if [ -e "{{.Param.dataMountPath}}/config/.zshenv.local" ]; then
        echo "Creating a symlink to .zshenv.local"
        ln -sf "{{.Param.dataMountPath}}/config/.zshenv.local" "$HOME/.zshenv.local"
      fi

      if [ -e "{{.Param.dataMountPath}}/config/.gitconfig" ]; then
        echo "Creating a symlink to .gitconfig"
        ln -sf "{{.Param.dataMountPath}}/config/.gitconfig" "$HOME/.gitconfig"
      fi

      if [ -e "{{.Param.dataMountPath}}/config/ssh/config" ]; then
        echo "Creating a symlink to ssh/config"
        mkdir -p $HOME/.ssh
        ln -sf "{{.Param.dataMountPath}}/config/ssh/config" "$HOME/.ssh/config"
      fi

      echo "$DIRECTORY does not exist, will setup"

      cd $HOME

      git clone https://github.com/vytautasjc/dotfiles.git
      
      cd $DIRECTORY

      make setup-zsh setup-git

  # Setup Node.js
  - mode: user
    script: |
      #!/bin/bash
      set -eux -o pipefail

      nvm install node
      nvm alias default node